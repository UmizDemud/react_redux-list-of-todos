{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["currentTodoReducer","state","action","type","payload","InitialState","query","status","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterTodos","useCallback","cleanQuery","trim","toLowerCase","todo","completed","title","includes","className","map","classNames","id","onClick","handleSelectTodo","TodoFilter","handleQueryChange","newQuery","value","onChange","e","newStatus","target","placeholder","style","pointerEvents","length","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","closeModal","useState","loading","setLoading","user","setUser","useEffect","userId","foundUser","href","email","name","App","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2cd92b9f.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({\n  type: 'currentTodo/REMOVE',\n});\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'query/SET';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'status/SET';\n  payload: Status;\n};\n\nconst setQuery = (payload: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload,\n});\n\nconst setStatus = (payload: Status): SetStatusAction => ({\n  type: 'status/SET',\n  payload,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string;\n  status: Status;\n} | null;\n\nconst InitialState = { query: '', status: 'all' } as State;\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: State = InitialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'status/SET':\n      return {\n        ...state,\n        status: action.payload,\n      } as State;\n    case 'query/SET':\n      return {\n        ...state,\n        query: action.payload,\n      } as State;\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]) => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[] | null;\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state as Todo[];\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleSelectTodo = (todo: Todo) => {\n    dispatch({ type: 'currentTodo/SET', payload: todo });\n  };\n\n  const filterTodos = useCallback(\n    () => {\n      const cleanQuery = filter?.query.trim().toLowerCase() || '';\n\n      switch (filter?.status) {\n        case 'active':\n          return (todos)\n            .filter(todo => !todo.completed\n                && todo.title.toLowerCase().includes(cleanQuery));\n        case 'completed':\n          return (todos)\n            .filter(todo => todo.completed\n                && todo.title.toLowerCase().includes(cleanQuery));\n        default:\n          return (todos)\n            .filter(todo => todo.title.toLowerCase().includes(cleanQuery));\n      }\n\n      return todos;\n    },\n    [filter, todos],\n  );\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filterTodos().map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames(\n              { 'has-background-info-light': currentTodo?.id === todo.id },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed\n                && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-success': todo.completed },\n                { 'has-text-danger': !todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleSelectTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'far',\n                    { 'fa-eye': currentTodo?.id !== todo.id },\n                    { 'fa-eye-slash': currentTodo?.id === todo.id },\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter = () => {\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleQueryChange = (newQuery: string) => {\n    dispatch({ payload: newQuery, type: 'query/SET' });\n  };\n\n  const handleStatusChange = (newStatus: Status) => {\n    dispatch({ payload: newStatus, type: 'status/SET' });\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter?.status || 'all'}\n            onChange={(e => handleStatusChange(e.target.value as Status))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={filter?.query || ''}\n          onChange={e => handleQueryChange(e.target.value)}\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span\n          className=\"icon is-right\"\n          style={{ pointerEvents: 'all' }}\n        >\n          {filter?.query?.length\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => handleQueryChange('')}\n                aria-label=\"Clear\"\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  closeModal: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  closeModal,\n}: Props) => {\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState<User>();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getUser(currentTodo?.userId || 0)\n      .then(foundUser => {\n        setUser(foundUser);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {loading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                aria-label=\"close\"\n                onClick={closeModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const closeModal = () => dispatch({ type: 'currentTodo/REMOVE' });\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        dispatch({ type: 'todos/SET', payload: todosFromServer });\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {\n                (todos).length\n                  ? <TodoList />\n                  : <Loader />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal closeModal={closeModal} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}